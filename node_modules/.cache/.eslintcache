[{"/home/nikita/work/profiru-challenge/profiru-frontend/src/index.tsx":"1","/home/nikita/work/profiru-challenge/profiru-frontend/src/reportWebVitals.ts":"2","/home/nikita/work/profiru-challenge/profiru-frontend/src/App.tsx":"3","/home/nikita/work/profiru-challenge/profiru-frontend/src/view/components/Form/Form.jsx":"4"},{"size":478,"mtime":1632825363323,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1632825363323,"results":"7","hashOfConfig":"6"},{"size":202,"mtime":1632825622362,"results":"8","hashOfConfig":"6"},{"size":6397,"mtime":1632842504278,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1e9ra55",{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/home/nikita/work/profiru-challenge/profiru-frontend/src/index.tsx",[],["20","21"],"/home/nikita/work/profiru-challenge/profiru-frontend/src/reportWebVitals.ts",[],"/home/nikita/work/profiru-challenge/profiru-frontend/src/App.tsx",[],"/home/nikita/work/profiru-challenge/profiru-frontend/src/view/components/Form/Form.jsx",["22","23","24","25","26"],"import React, { useState, useEffect } from \"react\";\nimport style from \"./style.module.css\";\n\nfunction validateURL(URL) {\n  var pattern = new RegExp(\n    \"^(https?:\\\\/\\\\/)?\" +\n      \"((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\" +\n      \"((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\" +\n      \"(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\" +\n      \"(\\\\?[;&a-z\\\\d%_.~+=-]*)?\" +\n      \"(\\\\#[-a-z\\\\d_]*)?$\",\n    \"i\"\n  );\n  return !!pattern.test(URL);\n}\n\nconst Form = () => {\n  const [urlList, setUrlList] = useState();\n  const [displayList, setDisplayList] = useState(false);\n  const [fullURL, setFullURL] = useState(\"\");\n  const [customURL, setCustomURL] = useState(\"\");\n  const [customUrlMode, setCustomUrlMode] = useState(false);\n  const onChangeFullURL = (event) => setFullURL(event.target.value);\n  const onChangeCustomURL = (event) => setCustomURL(event.target.value);\n  const onChangeShrinkMode = () => {\n    setCustomUrlMode(!customUrlMode);\n  };\n\n  const getUrlList = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/urlsList\");\n      const jsonData = await response.json();\n      setUrlList(jsonData);\n    } catch (error) {}\n  };\n\n  const shrinkURL = async (fullUrl, shorUrl) => {\n    try {\n      if (validateURL(fullUrl)) {\n        if (customUrlMode) {\n          const body = { fullUrl, shorUrl };\n          const shrinkURL = await fetch(\n            \"http://localhost:5000/shrinkCustomUrl\",\n            {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify(body),\n            }\n          );\n        } else {\n          const body = { fullUrl };\n          const shrinkURL = await fetch(\"http://localhost:5000/shrinkUrl\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(body),\n          });\n        }\n        setDisplayList = true;\n        fullURL = \"\";\n        customURL = \"\";\n        window.location.href = \"/\";\n      } else {\n        alert(\"Проверьте правильность введеных данных !\");\n      }\n    } catch (error) {\n      console.log(\"что-то пошло не так\");\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getUrlList();\n  }, []);\n\n  if (!displayList) {\n    return (\n      <div className={style.wrapper}>\n        <div className={style.form}>\n          <div className={style.logo}>\n            <p className={style.icon}>✂️</p>\n            <p className={style.title}>URL урезатель</p>\n          </div>\n          <div className={style.label}>\n            <div>\n              <p className={style.top}>Поместите в поле ввода свой URL</p>\n            </div>\n            <div>\n              <p className={style.bottom}>\n                на его основе будет создан короткий URL\n              </p>\n            </div>\n          </div>\n          <div className={style.input}>\n            <div>\n              <input\n                placeholder=\"Полный URL\"\n                className={style.inputComponent}\n                type=\"text\"\n                key=\"full\"\n                value={fullURL}\n                onChange={onChangeFullURL}\n              />\n            </div>\n            <div className={style.padding_small}>\n              <p className={style.inputLabel_checkbox}>\n                Задать пользовательский короткий URL\n              </p>\n              <input\n                type=\"checkbox\"\n                id=\"customURL\"\n                name=\"customURLcheck\"\n                className={style.checkbox}\n                onClick={onChangeShrinkMode}\n              ></input>\n            </div>\n            <div>\n              {customUrlMode ? (\n                <div className={style.input}>\n                  <input\n                    placeholder=\"Желаемый URL\"\n                    className={style.inputComponent}\n                    type=\"text\"\n                    key=\"custom\"\n                    value={customURL}\n                    onChange={onChangeCustomURL}\n                  />\n                </div>\n              ) : null}\n            </div>\n          </div>\n          <div className={style.button}>\n            <button\n              className={\n                (customUrlMode && customURL && fullURL) ||\n                (!customUrlMode && fullURL)\n                  ? style.buttonComponent\n                  : style.buttonComponent_disabled\n              }\n              onClick={() => shrinkURL(fullURL, customURL)}\n              disabled={\n                !(\n                  (customUrlMode && customURL.length>0) ||\n                  (!customUrlMode && fullURL)\n                )\n              }\n            >\n              Сократить URL\n            </button>\n          </div>\n        </div>\n        <div className={style.absolute}>\n          <button\n            className={style.button_viewMode}\n            onClick={() => setDisplayList(!displayList)}\n          >\n            {displayList ? \"на главную\" : \"список URL\"}\n          </button>\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className={style.wrapper}>\n        <div className={style.form}>\n          <div className={style.table}>\n            <table>\n              <thead>\n                <tr>\n                  <th>Полный URL</th>\n                  <th>Сокращенный URL</th>\n                </tr>\n              </thead>\n              <tbody>\n                {urlList.map((url) => {\n                  return (\n                    <tr>\n                      <td className={style.fullURL}>\n                        <a href={url.full}> {url.full} </a>\n                      </td>\n                      <td className={style.shortURL}>\n                        <a href={`http://localhost:5000//${url.short}`} >{url.short} </a>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n        <div className={style.absolute}>\n          <button\n            className={style.button_viewMode}\n            onClick={() => setDisplayList(!displayList)}\n          >\n            {displayList ? \"на главную\" : \"список URL\"}\n          </button>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Form;\n",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":42,"column":17,"nodeType":"33","messageId":"34","endLine":42,"endColumn":26},{"ruleId":"31","severity":1,"message":"32","line":52,"column":17,"nodeType":"33","messageId":"34","endLine":52,"endColumn":26},{"ruleId":"35","severity":1,"message":"36","line":58,"column":9,"nodeType":"33","messageId":"37","endLine":58,"endColumn":23},{"ruleId":"35","severity":1,"message":"38","line":59,"column":9,"nodeType":"33","messageId":"37","endLine":59,"endColumn":16},{"ruleId":"35","severity":1,"message":"39","line":60,"column":9,"nodeType":"33","messageId":"37","endLine":60,"endColumn":18},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'shrinkURL' is assigned a value but never used.","Identifier","unusedVar","no-const-assign","'setDisplayList' is constant.","const","'fullURL' is constant.","'customURL' is constant.","no-global-assign","no-unsafe-negation"]